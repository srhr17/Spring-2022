summary(predict(m5,test_df$x))
predict(m5,test_df$x)
m5<-smooth.spline(x=df$x,df$y,df=5,cv=TRUE)
print(m5)
plot(df$y,ty='l')
plot(test_df$y,ty='l')
m10<-smooth.spline(df$x,df$y,df=10,cv=TRUE)
m10
plot(test_df$y,ty='l')
plot(predict(m10,test_df$x))
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x))
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x))
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x))
par(new=TRUE)
plot(m10)
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x))
par(new=TRUE)
plot(m10,ty='l')
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x))
par(new=TRUE)
plot(m10,ty='l',col='red')
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue')
par(new=TRUE)
plot(m10,ty='l',col='red')
plot(test_df$y,ty='l')
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue')
par(new=TRUE)
plot(m10,ty='l',col='red')
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue')
par(new=TRUE)
plot(m10,ty='l',col='red')
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",labels=FALSE)
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",labels=FALSE)
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "",labels=FALSE)
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",labels=FALSE,yaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",labels=FALSE)
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "",labels=FALSE)
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",yaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",yaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",yaxt="n")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "",yaxt="n")
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",yaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",yaxt="n")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",yaxt="n",xaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",yaxt="n",xaxt="n")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="My Title", col.main="red",sub="My Sub-title",xlab="My X label", ylab="My Y label", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",yaxt="n",xaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",yaxt="n",xaxt="n")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="My Title", col.main="red",sub="Plot with underlying func + obs points + optimal smooth spline",xlab="X", ylab="Y", cex.lab=0.75)
plot(test_df$y,ty='l',xlab = "",ylab = "",yaxt="n",xaxt="n")
par(new=TRUE)
plot(predict(m10,test_df$x),col='blue',xlab = "",ylab = "",yaxt="n",xaxt="n")
par(new=TRUE)
plot(m10,ty='l',col='red',xlab = "",ylab = "")
title(main="Plot with underlying func + obs points + optimal smooth spline", col.main="black",xlab="X", ylab="Y", cex.lab=0.75)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
data("mcycle")
data("mcycle")
df=data.frame(mycycle)
data("mcycle")
df=data.frame(mcycle)
summary(df)
head(df)
summary(df)
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df==data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
return cbind(data,cv,as.numeric(lambda))
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df==data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
return retval
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
return retval
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
return retval
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=T)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
return retval
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=T)
cv<-model$cv.crit
lambda<-model$lambda
#retval<-cbind(data,cv,as.numeric(lambda))
#return retval
}
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=T)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
#return retval
}
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=T)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
#return retval
}
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=T)
cv<-model$cv.crit
lambda<-model$lambda
retval<-cbind(data,cv,as.numeric(lambda))
return retval
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df==data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
retval<-(cbind(data,cv,as.numeric(lambda)))
}
df<-seq(5,20,by=0.5)
data("mcycle")
df=data.frame(mcycle)
head(df)
summary(df)
data<-seq(5,20,by=0.5)
val<-lapply(data,spline,x=df$times,y=df$accel)
lapply(data,spline,x=df$times,y=df$accel)
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
retval<-(cbind(data,cv,as.numeric(lambda)))
}
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=TRUE)
cv<-model$cv.crit
lambda<-model$lambda
retval<-(cbind(data,cv,as.numeric(lambda)))
}
val<-lapply(data,spline,x=df$times,y=df$accel)
n_rows = length(data)
mat <- matrix(1:n_rows*4, nrow = n_rows, ncol=3)
for (i in 1:n_rows)
{
mat[i,] = val[[i]]
}
mat<- as.data.frame(mat)
names(mat) <- c("dataframe","error","lambda")
mat
best_model_fit = mat[which.min(mat$error),]
cat("The best model_fit:\n\tdegree of freedom = ", best_model_fit$datatframe , "\n\tlamb
da = ", best_model_fit$lambda, "\n\tcross validation error results = ", best_model
_fit$error)
best_model_fit = mat[which.min(mat$error),]
cat("The best model_fit:\n\tdegree of freedom = ", best_model_fit$datatframe , "\n\tlamb
da = ", best_model_fit$lambda, "\n\tcross validation error results = ", best_model
_fit$error)
best_model_fit = mat[which.min(mat$error),]
cat("The best model_fit:\n\tdegree of freedom = ", best_model_fit$datatframe , "\n\tlambda = ", best_model_fit$lambda, "\n\tcross validation error results = ", best_model_fit$error)
best_model_fit = mat[which.min(mat$error),]
cat("The best model_fit:\n\tdegree of freedom = ", best_model_fit$datatframe , "\n\tlambda = ", best_model_fit$lambda, "\n\tcross validation error results = ", best_model_fit$error)
x = mcycle$times
y = mcycle$accel
summ = x+y
values <- (summ + abs(min(summ)))/max(summ + abs(min(summ)))
model_fit_best <- smooth.spline(x, y, df = best_model_fit$dataframe, cv = T)
plot(x,y, pch = 16, main = paste0(" Best model_fit df - ", best_model_fit$dataframe), xl
ab = "Time", ylab = "Acceleration")
plot(x,y, pch = 16, main = paste0(" Best model_fit df - ", best_model_fit$dataframe), xlab = "Time", ylab = "Acceleration")
lines(model_fit_best, lty = 2, col = "red")
model_fit_df5 <- smooth.spline(x, y, df = 5, cv = T)
model_fit_df10 <- smooth.spline(x, y, df = 10, cv = T)
model_fit_df15 <- smooth.spline(x, y, df = 15, cv = T)
plot(x,y, pch = 16, main = "Time vs Acceleration", xlab = "Time", ylab = "Acceleration")
lines(model_fit_df5, lty = 2, col = "red")
lines(model_fit_df10, lty = 2, col = "blue")
lines(model_fit_df15, lty = 2, col = "black")
legend("bottomleft", legend=c("5", "10", "15"),
col=c("red", "blue", "green"), lty=2, cex=0.8,title = "degree of freedom", text.font = 1)
plot(mat$dataframe, mat$error, pch = 16, col = "blue", main = "df vs cv error", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
abline(v = best_model_fit$dataframe, col = "red", lty = 2)
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=TRUE)
retval<-(cbind(data,model$cv.crit,as.numeric(model$lambda)))
}
data<-seq(5,20,by=0.5)
val<-lapply(data,spline,x=df$times,y=df$accel)
n_rows = length(data)
mat <- matrix(1:n_rows*4, nrow = n_rows, ncol=3)
for (i in 1:n_rows)
{
mat[i,] = val[[i]]
}
mat<- data.frame(mat)
names(mat) <- c("dataframe","error","lambda")
mat
mat <- matrix(1:length(data)*4, nrow = length(data), ncol=3)
for (i in 1:length(data))
{
mat[i,] = val[[i]]
}
mat<- data.frame(mat)
names(mat) <- c("dataframe","error","lambda")
mat
data1 <- matrix(1:length(data)*4, nrow = length(data), ncol=3)
for (i in 1:length(data))
{
data1[i,] = val[[i]]
}
data1<- data.frame(mat)
names(data1) <- c("dataframe","error","lambda")
data1
best_model_fit = data1[which.min(data1$error),]
cat("The best model_fit:\n\tdegree of freedom = ", best_model_fit$datatframe , "\n\tlambda = ", best_model_fit$lambda, "\n\tcross validation error results = ", best_model_fit$error)
best_model_fit = data1[which.min(data1$error),]
cat("The best model_fit:\tdegree of freedom = ", best_model_fit$datatframe , "\tlambda = ", best_model_fit$lambda, "\tcross validation error results = ", best_model_fit$error)
best_model_fit = data1[which.min(data1$error),]
cat("The best model_fit: degree of freedom = ", best_model_fit$datatframe , "\tlambda = ", best_model_fit$lambda, "\tcross validation error results = ", best_model_fit$error)
best_model_fit = data1[which.min(data1$error),]
cat("The best model_fit: degree of freedom = ", best_model_fit$data , "\tlambda = ", best_model_fit$lambda, "\tcross validation error results = ", best_model_fit$error)
best_model = data1[which.min(data1$error),]
cat("The best model_fit: degree of freedom = ", best_model$data , "\tlambda = ", best_model$lambda, "\tcross validation error results = ", best_model$error)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(x, y, df = best_model$dataframe, cv = T)
plot(x,y, pch = 16, main = paste(" Best model_fit df - ", best_model$dataframe), xlab = "Time", ylab = "Acceleration")
lines(model_fit_best, lty = 2, col = "red")
plot(x,y, pch = 16, main = paste(" Best df for the model - ", best_model$dataframe), xlab = "Time", ylab = "Acceleration")
lines(model_fit_best, lty = 2, col = "red")
model_fit_df5 <- smooth.spline(x, y, df = 5, cv = T)
model_fit_df10 <- smooth.spline(x, y, df = 10, cv = T)
model_fit_df15 <- smooth.spline(x, y, df = 15, cv = T)
plot(x,y, pch = 16, main = "Time vs Acceleration", xlab = "Time", ylab = "Acceleration")
lines(model_fit_df5, lty = 2, col = "red")
lines(model_fit_df10, lty = 2, col = "blue")
lines(model_fit_df15, lty = 2, col = "black")
legend("bottomleft", legend=c("5", "10", "15"),
col=c("red", "blue", "green"), lty=2, cex=0.8,title = "df", text.font = 1)
plot(x,y, pch = 16, xlab = "Time", ylab = "Acceleration")
lines(model_fit_df5, lty = 2, col = "red")
lines(model_fit_df10, lty = 2, col = "blue")
lines(model_fit_df15, lty = 2, col = "black")
legend("bottomleft", legend=c("5", "10", "15"),
col=c("red", "blue", "green"), lty=2, cex=0.8,title = "df", text.font = 1)
plot(mat$dataframe, mat$error, pch = 16, col = "blue", main = "df vs cv error", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
abline(v = best_model_fit$dataframe, col = "red", lty = 2)
plot(mat$dataframe, mat$error, pch = 16, col = "blue", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
abline(v = best_model_fit$dataframe, col = "red", lty = 2)
library(MASS)
data("mcycle")
df=data.frame(mcycle)
head(df)
summary(df)
spline<-function(data,x,y)
{
model<-smooth.spline(x,y,df=data,cv=TRUE)
retval<-(cbind(data,model$cv.crit,as.numeric(model$lambda)))
}
data<-seq(5,20,by=0.5)
val<-lapply(data,spline,x=df$times,y=df$accel)
data1 <- matrix(1:length(data)*4, nrow = length(data), ncol=3)
for (i in 1:length(data))
{
data1[i,] = val[[i]]
}
data1<- data.frame(mat)
data1 <- matrix(1:length(data)*4, nrow = length(data), ncol=3)
for (i in 1:length(data))
{
data1[i,] = val[[i]]
}
data1<- data.frame(data1)
names(data1) <- c("dataframe","error","lambda")
data1
best_model = data1[which.min(data1$error),]
cat("The best model_fit: degree of freedom = ", best_model$data , "\tlambda = ", best_model$lambda, "\tcross validation error results = ", best_model$error)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(x, y, df = best_model$dataframe, cv = T)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(df$accel, df$times, df = best_model$dataframe, cv = T)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(df$times, df$accel, df = best_model$dataframe, cv = T)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(df$times, df$accel, df = best_model$dataframe, cv = T)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(df$accel, df$times, df = best_model$dataframe, cv = T)
sum = df$times+df$accel
values <- (sum + abs(min(sum)))/max(sum + abs(min(sum)))
model_fit_best <- smooth.spline(df$times, df$accel, df = best_model$dataframe, cv = T)
plot(x,y, pch = 16, main = paste(" Best df for the model - ", best_model$dataframe), xlab = "Time", ylab = "Acceleration")
plot(df$times,df$accel, pch = 16, main = paste(" Best df for the model - ", best_model$dataframe), xlab = "Time", ylab = "Acceleration")
lines(model_fit_best, lty = 2, col = "red")
model_fit_df5 <- smooth.spline(df$times, df$accel, df = 5, cv = T)
model_fit_df10 <- smooth.spline(df$times, df$accel, df = 10, cv = T)
model_fit_df15 <- smooth.spline(df$times, df$accel, df = 15, cv = T)
plot(x,y, pch = 16, xlab = "Time", ylab = "Acceleration")
plot(df$times,df$accel, pch = 16, xlab = "Time", ylab = "Acceleration")
lines(model_fit_df5, lty = 2, col = "red")
lines(model_fit_df10, lty = 2, col = "blue")
lines(model_fit_df15, lty = 2, col = "black")
legend("bottomleft", legend=c("5", "10", "15"),
col=c("red", "blue", "green"), lty=2, cex=0.8,title = "df", text.font = 1)
plot(mat$dataframe, mat$error, pch = 16, col = "blue", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
plot(mat$dataframe, data1$error, pch = 16, col = "blue", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
plot(data1$dataframe, data1$error, pch = 16, col = "blue", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
abline(v = best_model_fit$dataframe, col = "red", lty = 2)
plot(data1$dataframe, data1$error, pch = 16, col = "blue", xlab ="degree of freedom", ylab = "cross validation error", xaxp = c(5, 20, 30), cex.axis =0.75)
abline(v = best_model$dataframe, col = "red", lty = 2)
qchisq(0.95,1)
pchisq(3.841459,1)
abs(polyroot(1,1.9,0.88))
abs(polyroot(c(1,1.9,0.88)))
-10/11
abs(polyroot(c(1,0.2,0.7)))
abs(polyroot(c(1,0.6)))
abs(polyroot(c(1,-0.8)))
abs(polyroot(c(1,-0.6)))
abs(polyroot(c(1,0.2,0.8)))
abs(polyroot(c(1,1.8,0.81)))
abs(polyroot(c(1,0,-0.4)))
qchisq(0.95,1)
3.841459-2
qchisq(0.95,2)
5.991465-4
pchisq(1.991465,2)
pchisq(5.991465,2)
qchisq(0.99,2)
setwd("D:/Spring-2022/MATH 546 - Intro to time series")
# Importing data
huron = read.table(file="huron_depth.csv",sep=",",header=TRUE)
# Importing data
huron = read.table(file="./huron_depth.csv",sep=",",header=TRUE)
# Importing data
huron = read.table(file="D:/Spring-2022/MATH 546 - Intro to time series/huron_depth.csv",sep=",",header=TRUE)
head(huron)
str(huron)
# Importing data
huron = read.table(file="D:/Spring-2022/MATH 546 - Intro to time series/huron_depth.csv",sep=",",header=TRUE)
head(huron)
str(huron)
summary(huron)
# Extracting dates and adding them in the dataframe as seperate columns
huron$Date <- strptime(huron$Date,"%m/%d/%Y")
huron$year <- as.numeric(format(huron$Date, format="%Y"))
huron$month <- as.numeric(format(huron$Date, format="%m"))
head(huron)
# Creating a subset having only the month of January
Jan_huron <- subset(huron, month==1)
huron_depth <- Jan_huron$Average
year <- Jan_huron$year
plot(huron_depth~year,type="l")
# Fitting a ARMA(2, 1) model
arma_21 <- arima(huron_depth, order = c(2, 0, 1))
summary(arma_21)
arma_21
# Coefficients of the model
arma_21$coef
# Calculating the Confidence Interval using Fisher method
# Standard Error
se <- sqrt(arma_21$var.coef[3, 3])
print(se)
fisher_up <- arma_21$coef[3] + 1.96 * se
print(fisher_up)
fisher_down <- arma_21$coef[3] - 1.96 * se
print(fisher_down)
# We get the same value using the confint() function
confint(arma_21, parm = "ma1")
# Profile likelihood Confidence Interval
K <- 500
ma1 <- seq(from=-1,to=1.1,length=K)
profile_loglik <- rep(NA,K)
for(k in 1:K){
profile_loglik[k] <- logLik(arima(huron_depth,order=c(2,0,1),
fixed=c(NA,NA,ma1[k],NA)))
}
# plot(profile_loglik~ma1,ty="l")
# Profile likelihood Confidence Interval, going wide to get better results
K <- 500
ma1 <- seq(from=-1.0,to=1.8,length=K)
profile_loglik <- rep(NA,K)
for(k in 1:K){
profile_loglik[k] <- logLik(arima(huron_depth,order=c(2,0,1),
fixed=c(NA,NA,ma1[k],NA)))
}
plot(profile_loglik~ma1,ty="l")
# Data NA after 383rd index
profile_loglik
# Finding the index for lower bound from the first 383 values (non NAs)
# Difference should be just more than 0
max(profile_loglik[1:383]) - profile_loglik[1:383] - 1.92
# Looking at the above values and eyeballing, we see that 112th index is less than 0
max(profile_loglik[1:383]) - profile_loglik[111] - 1.92
max(profile_loglik[1:383]) - profile_loglik[112] - 1.92
# Lower bound between 111 and 112
ma1[111]
ma1[112]
# For upper bound we check when the value goes under zero
max(profile_loglik[1:383]) - profile_loglik[1:383] + 1.92
ma1[383]
set.seed(1)
J <- 1000
params <- coef(arma_21)
ar <- params[grep("^ar",names(params))]
ma <- params[grep("^ma",names(params))]
intercept <- params["intercept"]
sigma <- sqrt(arma_21$sigma2)
theta <- matrix(NA,nrow=J,ncol=length(params),
dimnames=list(NULL,names(params)))
for(j in 1:J){
Y_j <- arima.sim(list(ar=ar,ma=ma),
n=length(huron_depth),
sd=sigma)
+ intercept
theta[j,] <- coef(arima(Y_j, order=c(2,0,1)))
}
# checking the first row
theta[1, ]
# Storing the ma1 values
ma1_boot <- theta[, 3]
# Sorting the values
ma1_boot <- sort(ma1_boot)
# Getting the 25th and 975th record - for 95% confidence interval
ma1_boot[25]
ma1_boot[975]
