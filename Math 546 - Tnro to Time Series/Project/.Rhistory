knitr::opts_chunk$set(echo = TRUE)
df<-read.csv('products.csv',header=F,col.names = c("ID","Product"))
library(readr)
library(dplyr)
library(plyr)
library(arules)
tr_1k <- read.csv ('tr-1k.csv', header = FALSE,fill = TRUE,col.names = c("ID","p1","p2","p3","p4","p5","p6"))
tr_1k<-data.frame(tr_1k[-c(1)])
View(tr_1k)
View(df)
matchProduct<-function(x)
{
return (subset(df,ID==x)$Product)
}
k<-apply(tr_1k,2,matchProduct)
library(readr)
library(dplyr)
library(plyr)
library(arules)
tr_1k <- read.csv ('tr-1k.csv', header = FALSE,fill = TRUE,col.names = c("ID","p1","p2","p3","p4","p5","p6"),sep=",")
library(readr)
library(dplyr)
library(plyr)
library(arules)
library(arulesViz)
library(readr)
library(dplyr)
library(plyr)
library(arules)
library(cluster)
library(factoextra)
library(fpc)
library(readr)
library(dplyr)
library(plyr)
library(arules)
library(cluster)
library(factoextra)
tr_1k <- read.transactions('tr-1k.csv', header = FALSE,sep=",")
View(tr_1k)
View(df)
library(readr)
library(dplyr)
library(plyr)
library(arules)
tr_1k <- read.csv ('tr-1k.csv', header = FALSE,fill = TRUE,col.names = c("ID","p1","p2","p3","p4","p5","p6"))
tr_1k<-data.frame(tr_1k[-c(1)])
View(tr_1k)
View(df)
tr1k.canon<-data.frame(c(df),c("p1"),c("p2"),c("p3"),c("p4"),c("p5"),c("p6"))
tr1k.canon<-data.frame(c(df),c("p1"),c("p2"),c("p3"),c("p4"),c("p5"),c("p6"))
View(tr_1k)
View(tr1k.canon)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
directory <- getwd()
setwd(directory)
df.tr <- list()
name.tr <- c("tr-1k.csv")
for(i in 1:4){
df.tr[[i]] <- read.csv(name.tr[i], header=FALSE, fill = TRUE,
col.names = c("ID","P1","P2","P3","P4","P5","P6","P7","P8"))
}
df.tr <- list()
name.tr <- c("tr-1k.csv")
for(i in 1:4){
df.tr[[i]] <- read.csv(name.tr[i], header=FALSE, fill = TRUE,
col.names = c("ID","P1","P2","P3","P4","P5","P6"))
}
df.tr <- list()
name.tr <- c("tr-1k.csv")
for(i in 1:4){
df.tr[[i]] <- read.csv(name.tr[i], header=FALSE, fill = TRUE,
col.names = c("ID","P1","P2","P3","P4","P5","P6"))
}
df.tr <- list()
name.tr <- c("tr-1k.csv")
df.tr <- read.csv(name.tr[0], header=FALSE, fill = TRUE,
col.names = c("ID","P1","P2","P3","P4","P5","P6"))
df.tr <- list()
name.tr <- c("tr-1k.csv")
df.tr <- read.csv(name.tr[0], header=FALSE, fill = TRUE,col.names = c("ID","P1","P2","P3","P4","P5","P6"))
df.tr <- list()
name.tr <- c("tr-1k.csv")
df.tr <- read.csv(name.tr[0], header=FALSE, fill = TRUE)
df.tr <- list()
name.tr <- c("tr-1k.csv")
df.tr <- read.csv(name.tr[0], header=FALSE, fill = TRUE)
df.tr <- list()
name.tr <- c("tr-1k.csv")
df.tr <- read.table(name.tr[0], header=FALSE, fill = TRUE)
df.tr <- read.table("tr-1k.csv", header=FALSE, fill = TRUE)
df.tr <- read.table("tr-1k.csv", header=FALSE, fill = TRUE)
df.products <- read.csv("products.csv", header = FALSE,
col.names = c("ProductID","Productname"))
new.tr<- data.frame("ID"=1:num.tr[i])
new.tr <- list()
num.tr <- c(1000, 5000, 20000, 75000)
for (i in 1:4){
new.tr[[i]] <- data.frame("ID"=1:num.tr[i])
}
dim(new.tr[[3]])
for (i in 1:4)
for (j in 1:ncol(df.tr)){
product.col <- df.products$Productname[match(df.tr[,j], df.products$ProductID)]
new.tr[[i]] <- cbind(new.tr[[i]], product.col)
}
setwd("D:/Spring-2022/MATH 546 - Intro to time series/Project")
knitr::opts_chunk$set(echo = TRUE)
df<-read.csv('AirQualityUCI.xlsx')
df<-read.table('AirQualityUCI.xlsx')
df<-read.excel('AirQualityUCI.xlsx')
df<-read.excel('AirQualityUCI.xlsx',sheet=1)
df<-read_excel('AirQualityUCI.xlsx',sheet=1)
df<-read_excel('AirQualityUCI.xlsx')
df<-read.table('AirQualityUCI.xlsx')
df<-read.table('AirQualityUCI.xlsx',sep='\t')
install.packages("readxl")
library("readxl")
df<-read_excel('AirQualityUCI.xlsx')
#install.packages("readxl")
library("readxl")
df<-read_excel('AirQualityUCI.xlsx')
head(df)
dims(df)
dim(df)
#install.packages("readxl")
library("readxl")
AQI_data<-read_excel('AirQualityUCI.xlsx')
summary(AQI_data)
AQI_data[,c(1,2,3)]
AQI_data<-AQI_data[,c(1,2,3)]
plot(AQI[,c(3)])
plot(AQI_data$`CO(GT)`)
plot(AQI_data$`CO(GT)`,ty='l')
#install.packages("readxl")
library("readxl")
AQI_data<-read_excel('AirQualityUCI.xlsx')
summary(AQI_data)
AQI_data<-AQI_data[,c(1,2,9)]
#install.packages("readxl")
library("readxl")
AQI_data<-read_excel('AirQualityUCI.xlsx')
summary(AQI_data)
AQI_data<-AQI_data[,c(1,2,10)]
plot(AQI_data$`NO2(GT)`,ty='l')
AQI_data$`NO2(GT)`
plot(AQI_data$`NO2(GT)`[:50,],ty='l')
plot(AQI_data$`NO2(GT)`[1:50,],ty='l')
plot(AQI_data$`NO2(GT)`[1:50,:],ty='l')
plot(AQI_data$`NO2(GT)`,ty='l')
plot(head(AQI_data$`NO2(GT)`,50),ty='l')
plot(head(AQI_data$`NO2(GT)`,100),ty='l')
plot(head(AQI_data$`NO2(GT)`,500),ty='l')
plot(head(AQI_data$`NO2(GT)`,300),ty='l')
plot(head(AQI_data$`NO2(GT)`,100),ty='l')
plot(head(AQI_data$Date,100),head(AQI_data$`NO2(GT)`,100),ty='l')
plot(head(AQI_data$Time,100),head(AQI_data$`NO2(GT)`,100),ty='l')
plot(head(AQI_data$`NO2(GT)`,100),ty='l')
AQI_data
AQI_data$Date <- as.Date(energy$Date)
AQI_data$Date <- as.Date(AQI_data$Date)
aggregate(AQI_data$`NO2(GT)`, by=list(AQI_data$Date), mean)
AQI_data$Date <- as.Date(AQI_data$Date)
AQI_data_new<-aggregate(AQI_data$`NO2(GT)`, by=list(AQI_data$Date), mean)
AQI_data_new
plot(AQI_data_new$x,ty='l')
spectrum(AQI_data_new$x)
spec$freq[which.max(spec$spec)]
spec<-spectrum(AQI_data_new$x)
spec$freq[which.max(spec$spec)]
knitr::opts_chunk$set(echo = TRUE)
install.packages("arulesViz")
library("arules")
library("arulesViz")
#install.packages("arulesViz")
library("arules")
library("arulesViz")
tr_1k <- read.transactions("tr-1k-canonical.csv", sep=",",header = FALSE)
tr_1k <- read.transactions("tr-1k_canonical.csv", sep=",",header = FALSE)
summary(tr_1k)
inspect(tr_1k[1:5])
tr_1k
View(tr_1k)
inspect(tr_1k[1:5])
freq <- apriori(tr_1k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
rm(freq)
inspect(sort(freq, decreasing = T, by="count"))
freq <- apriori(tr_1k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
rm(freq)
itemFrequencyPlot(tr_1k, support = 0.1)
image(tr_1k)
rules <- apriori(trans)
rules <- apriori(tr_1k)
rm(rules)
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
rm(freq)
itemFrequencyPlot(tr_1k, support = 0.01)
image(tr_1k)
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
rm(freq)
itemFrequencyPlot(tr_1k, support = 0.01)
image(tr_1k)
rules <- apriori(tr_1k, parameter = list(support=0.01, conf=0.5))
summary(rules)
inspect(head(rules, by="confidence"))
rules.sort.support <- sort(rules, by="support")
rules.sort.lift <- sort(rules, by="lift")
inspect(head(rules.sort.support,3))
new.rules <- rules[!duplicated(generatingItemsets(rules))]
new.rules.sort.support <- sort(new.rules, by="support")
new.rules.sort.lift <- sort(new.rules, by="lift")
new.rules.sort.confi <- sort(new.rules, by="confidence")
inspect(new.rules.sort.lift)
inspect(head(new.rules.sort.support,3))
inspect(head(new.rules.sort.confi,10))
plot(new.rules, engine="htmlwidget")
trans.list <- list()
trans.name <- c("tr-1k-canonical.csv", "tr-5k-canonical.csv",
"tr-20k-canonical.csv", "tr-75k-canonical.csv")
for (i in 1:4){
trans.list[[i]] <- read.transactions(trans.name[i], sep=",",header = FALSE)
}
trans.list <- list()
trans.name <- c("tr-1k_canonical.csv", "tr-5k_canonical.csv",
"tr-20k_canonical.csv", "tr-75k_canonical.csv")
for (i in 1:4){
trans.list[[i]] <- read.transactions(trans.name[i], sep=",",header = FALSE)
}
trans.list <- list()
trans.name <- c("tr-1k_canonical.csv", "tr-5k_canonical.csv",
"tr-20k_canonical.csv")
for (i in 1:4){
trans.list[[i]] <- read.transactions(trans.name[i], sep=",",header = FALSE)
}
trans.list <- list()
trans.name <- c("tr-1k_canonical.csv", "tr-5k_canonical.csv",
"tr-20k_canonical.csv")
for (i in 1:4){
trans.list[[i]] <- read.transactions(trans.name[i], sep=",",header = FALSE)
}
trans.list <- list()
trans.name <- c("tr-1k_canonical.csv", "tr-5k_canonical.csv",
"tr-20k_canonical.csv")
for (i in 1:3){
trans.list[[i]] <- read.transactions(trans.name[i], sep=",",header = FALSE)
}
freq.itset.1k <- apriori(trans.list[[1]], parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq.itset.1k, decreasing = T, by="count"))
rm(freq.itset.1k)
itemFrequencyPlot(trans.list[[1]], support = 0.1)
image(trans.list[[1]])
freq.itset.5k <- apriori(trans.list[[2]], parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq.itset.5k, decreasing = T, by="count"))
rm(freq.itset.5k)
itemFrequencyPlot(trans.list[[2]], support = 0.1)
image(trans.list[[2]])
freq.itset.20k <- apriori(trans.list[[3]], parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq.itset.20k, decreasing = T, by="count"))
rm(freq.itset.20k)
itemFrequencyPlot(trans.list[[3]], support = 0.1)
image(trans.list[[3]])
freq.itset.1k <- apriori(trans.list[[1]], parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq.itset.1k, decreasing = T, by="count"))
rm(freq.itset.1k)
itemFrequencyPlot(trans.list[[1]], support = 0.01)
image(trans.list[[1]])
freq.itset.5k <- apriori(trans.list[[2]], parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq.itset.5k, decreasing = T, by="count"))
rm(freq.itset.5k)
itemFrequencyPlot(trans.list[[2]], support = 0.01)
image(trans.list[[2]])
freq.itset.20k <- apriori(trans.list[[3]], parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq.itset.20k, decreasing = T, by="count"))
rm(freq.itset.20k)
itemFrequencyPlot(trans.list[[3]], support = 0.01)
image(trans.list[[3]])
rules.1 <- apriori(trans.list[[1]], parameter = list(support=0.01, conf=0.5))
# Removing the duplicated rules
new.rules.1 <- rules.1[!duplicated(generatingItemsets(rules.1))]
summary(new.rules.1)
new.rules.1.sort.support <- sort(new.rules.1, by="support")
new.rules.1.sort.lift <- sort(new.rules.1, by="lift")
new.rules.1.sort.confi <- sort(new.rules.1, by="confidence")
rules.5 <- apriori(trans.list[[2]], parameter = list(support=0.01, conf=0.5))
# Removing the duplicated rules
new.rules.5 <- rules.5[!duplicated(generatingItemsets(rules.5))]
summary(new.rules.5)
new.rules.5.sort.support <- sort(new.rules.5, by="support")
new.rules.5.sort.lift <- sort(new.rules.5, by="lift")
new.rules.5.sort.confi <- sort(new.rules.5, by="confidence")
rules.20 <- apriori(trans.list[[3]], parameter = list(support=0.01, conf=0.5))
# Removing the duplicated rules
new.rules.20 <- rules.20[!duplicated(generatingItemsets(rules.20))]
summary(new.rules.20)
new.rules.20.sort.support <- sort(new.rules.20, by="support")
new.rules.20.sort.lift <- sort(new.rules.20, by="lift")
new.rules.20.sort.confi <- sort(new.rules.20, by="confidence")
plot(new.rules.1, engine="htmlwidget")
plot(new.rules.5, engine="htmlwidget")
plot(new.rules.20, engine="htmlwidget")
tr_1k <- read.transactions("tr-1k_canonical.csv", sep=",",header = FALSE)
summary(tr_1k)
freq <- apriori(tr_1k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
rm(freq)
itemFrequencyPlot(tr_1k, support = 0.1)
image(tr_1k)
freq <- apriori(tr_1k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.1)
image(tr_1k)
rules <- apriori(tr_1k)
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.01)
image(tr_1k)
rules <- apriori(tr_1k, parameter = list(support=0.01, conf=0.5))
summary(rules)
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.01)
rules <- apriori(tr_1k, parameter = list(support=0.01, conf=0.5))
summary(rules)
inspect(head(rules, by="confidence"))
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.01)
rules <- apriori(tr_1k, parameter = list(support=0.01, conf=0.5))
inspect(head(rules, by="confidence"))
freq <- apriori(tr_1k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.1)
rules <- apriori(tr_1k)
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.01)
rules <- apriori(tr_1k, parameter = list(support=0.01, conf=0.5))
freq <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.01)
rules <- apriori(tr_1k, parameter = list(support=0.01, conf=0.5))
inspect(head(rules, by="confidence"))
rules_support <- sort(rules, by="support")
rules_lift <- sort(rules, by="lift")
inspect(head(rules_support,5))
newrules <- rules[!duplicated(generatingItemsets(rules))]
newrules_support <- sort(new.rules, by="support")
newrules_lift <- sort(new.rules, by="lift")
newrules_confidence <- sort(new.rules, by="confidence")
inspect(newrules_lift)
inspect(head(newrules_support,3))
inspect(head(newrules_confidence,10))
newrules <- rules[!duplicated(generatingItemsets(rules))]
newrules_support <- sort(new.rules, by="support")
newrules_lift <- sort(new.rules, by="lift")
newrules_confidence <- sort(new.rules, by="confidence")
print("By Lift")
inspect(newrules_lift)
print("By Support")
inspect(head(newrules_support,3))
print("By Confidence")
inspect(head(newrules_confidence,10))
newrules <- rules[!duplicated(generatingItemsets(rules))]
newrules_support <- sort(new.rules, by="support")
newrules_lift <- sort(new.rules, by="lift")
newrules_confidence <- sort(new.rules, by="confidence")
print("By Lift")
inspect(newrules_lift,3)
newrules <- rules[!duplicated(generatingItemsets(rules))]
newrules_support <- sort(new.rules, by="support")
newrules_lift <- sort(new.rules, by="lift")
newrules_confidence <- sort(new.rules, by="confidence")
print("By Lift")
inspect(head(newrules_lift,3))
print("By Support")
inspect(head(newrules_support,3))
print("By Confidence")
inspect(head(newrules_confidence,3))
plot(newrules, engine="htmlwidget")
tr_1k <- read.transactions("tr-1k_canonical.csv", sep=",",header = FALSE)
freq_1k <- apriori(tr_1k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq_1k, decreasing = T, by="count"))
rm(freq.itset.1k)
itemFrequencyPlot(tr_1k], support = 0.1)
tr_5k <- read.transactions("tr-5k_canonical.csv", sep=",",header = FALSE)
freq_5k <- apriori(tr_5k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq_5k, decreasing = T, by="count"))
itemFrequencyPlot(t_5k, support = 0.1)
tr_5k <- read.transactions("tr-5k_canonical.csv", sep=",",header = FALSE)
freq_5k <- apriori(tr_5k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq_5k, decreasing = T, by="count"))
itemFrequencyPlot(tr_5k, support = 0.1)
tr_20k <- read.transactions("tr-20k_canonical.csv", sep=",",header = FALSE)
freq_20k <- apriori(tr_20k, parameter=list(support=0.1, target="frequent itemsets"))
inspect(sort(freq_20k, decreasing = T, by="count"))
itemFrequencyPlot(tr_20k, support = 0.1)
freq_1k <- apriori(tr_1k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq_1k, decreasing = T, by="count"))
itemFrequencyPlot(tr_1k, support = 0.01)
freq_5k <- apriori(tr_5k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq_5k, decreasing = T, by="count"))
itemFrequencyPlot(tr_5k, support = 0.01)
freq_20k <- apriori(tr_20k, parameter=list(support=0.01, target="frequent itemsets"))
inspect(sort(freq_20k, decreasing = T, by="count"))
itemFrequencyPlot(tr_20k, support = 0.01)
tr_1k <- read.transactions("tr-1k_canonical.csv", sep=",",header = FALSE)
frequent_itemset<-function(x,sup){
freq_1k <- apriori(tr_1k, parameter=list(support=sup, target="frequent itemsets"))
return (inspect(sort(freq_1k, decreasing = T, by="count")))
}
frequent_itemset<-function(x,sup){
freq_1k <- apriori(x, parameter=list(support=sup, target="frequent itemsets"))
return (inspect(sort(freq_1k, decreasing = T, by="count")))
}
frequent_itemset(tr_1k,0.1)
itemFrequencyPlot(tr_1k, support = 0.1)
rules<-function(x,sup)
{
rules <- apriori(x, parameter = list(support=sup, conf=0.5))
# Removing the duplicated rules
new_rules <- rules[!duplicated(generatingItemsets(rules))]
print(sort(new_rules, by="support"))
print(sort(new_rules, by="lift"))
print(sort(new_rules, by="confidence"))
}
rules(tr_5k)
rules(tr_5k,0.01)
rules.20 <- apriori(trans.list[[3]], parameter = list(support=0.01, conf=0.5))
# Removing the duplicated rules
new.rules.20 <- rules.20[!duplicated(generatingItemsets(rules.20))]
summary(new.rules.20)
new.rules.20.sort.support <- sort(new.rules.20, by="support")
new.rules.20.sort.lift <- sort(new.rules.20, by="lift")
new.rules.20.sort.confi <- sort(new.rules.20, by="confidence")
rules<-function(x,sup)
{
rules <- apriori(x, parameter = list(support=sup, conf=0.5))
# Removing the duplicated rules
new_rules <- rules[!duplicated(generatingItemsets(rules))]
print(summary(rules))
print(sort(new_rules, by="support"))
print(sort(new_rules, by="lift"))
print(sort(new_rules, by="confidence"))
}
rules(tr_5k,0.01)
rules(tr_20k,0.01)
rules<-function(x,sup)
{
rules <- apriori(x, parameter = list(support=sup, conf=0.5))
# Removing the duplicated rules
new_rules <- rules[!duplicated(generatingItemsets(rules))]
print(summary(rules))
print(sort(new_rules, by="support"))
print(sort(new_rules, by="lift"))
print(sort(new_rules, by="confidence"))
return(new_rules)
}
new_rules_5k<-rules(tr_5k,0.01)
new_rules_20k<-rules(tr_20k,0.01)
new_rules_1k<-rules(tr_1k,0.01)
frequent_itemset(tr_20k,0.01)
itemFrequencyPlot(tr_20k, support = 0.01)
frequent_itemset((tr_5k,0.01))
frequent_itemset(tr_5k,0.01)
itemFrequencyPlot(tr_5k, support = 0.01)
frequent_itemset(tr_1k,0.01)
frequent_itemset(tr_20k,0.1)
frequent_itemset(tr_20k,0.1)
itemFrequencyPlot(tr_20k, support = 0.1)
frequent_itemset(tr_1k,0.01)
itemFrequencyPlot(tr_1k, support = 0.01)
frequent_itemset(tr_5k,0.1)
itemFrequencyPlot(tr_5k, support = 0.1)
plot(new_rules_1k, engine="htmlwidget")
plot(new_rules_5k, engine="htmlwidget")
plot(new_rules_20k, engine="htmlwidget")
cat("The top 3 items selected are those which have highest support level:", "\n")
cat("{Truffle Cake} => {Gongolais Cookie}", "\n")
cat("{Marzipan Cookie} => {Truile Cookie}", "\n")
cat("{Strawberry Cake} => {Napoleon Cake}", "\n")
cat("(Since support is close to 0.5, the number of customers who buy the antecedent and consequent will be the same as the customer who buy the antecedent and do not buy the consequent)")
cat("The top 3 items selected are those which have highest support level:", "\n")
cat("{Truffle Cake} => {Gongolais Cookie}", "\n")
cat("{Marzipan Cookie} => {Truile Cookie}", "\n")
cat("{Strawberry Cake} => {Napoleon Cake}", "\n")
cat("The itemsets with highest confidence level of 1, which have the highest support level among them, will buy the consequent if buying the antecedent are:")
cat("The top 3 items selected are those which have highest confidence level:", "\n")
cat("{Apple Danish, Apple Tart} => {Apple Croissant}", "\n")
cat("{Apricot Danish, Opera Cake} => {Cherry Tart}", "\n")
cat("{Apple Danish, Apple Tart, Cherry Soda} => {Apple Croissant}", "\n")
cat("By Apriori principle")
cat("Rule 7 with support of 0.31","\n")
cat("{Apple Danish, Apple Tart, Cherry Soda} => {Apple Croissant}", "\n", "\n")
cat("Rule 9 with support of 0.40","\n")
cat("{Apple Danish, Apple Tart} => {Apple Croissant}", "\n")
cat("By Apriori principle","\n")
cat("Rule 7 with support of 0.31","\n")
cat("{Apple Danish, Apple Tart, Cherry Soda} => {Apple Croissant}", "\n", "\n")
cat("Rule 9 with support of 0.40","\n")
cat("{Apple Danish, Apple Tart} => {Apple Croissant}", "\n")
cat("By Apriori principle","\n")
cat("with support of 0.31","\n")
cat("{Apple Danish, Apple Tart, Cherry Soda} => {Apple Croissant}", "\n", "\n")
cat("with support of 0.40","\n")
cat("{Apple Danish, Apple Tart} => {Apple Croissant}", "\n")
